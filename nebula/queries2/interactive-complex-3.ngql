MATCH (countryX:Place{name:$countryXName})
MATCH (countryY:Place{name:$countryYName})
MATCH (person:Person)
  WHERE id(person) == $personId
WITH person, id(countryX) AS countryXId, id(countryY) AS countryYId
LIMIT 1
MATCH (city:Place)-[:IS_PART_OF]->(country:Place)
WITH person, id(country) AS countryId, countryXId, countryYId, id(city) AS cityId
WHERE countryId IN [countryXId, countryYId]
WITH person, countryXId, countryYId, collect(cityId) AS cities
MATCH (person)-[:KNOWS*1..2]-(friend)-[:IS_LOCATED_IN]->(city)
WITH id(person) AS personId, friend, id(city) AS cityId, cities, countryXId, countryYId
WHERE personId<>id(friend) AND NOT cityId IN cities
WITH DISTINCT friend, countryXId, countryYId
MATCH (friend)<-[:POST_HAS_CREATOR|COMMENT_HAS_CREATOR]-(message)
WHERE
  CASE
  WHEN $endDate > message.`Comment`.creationDate AND message.`Comment`.creationDate >= $startDate THEN true
  WHEN $endDate > message.Post.creationDate AND message.Post.creationDate >= $startDate THEN true
  ELSE false
  END
MATCH (message)-[:IS_LOCATED_IN]->(country)
WITH friend, id(country) AS countryId, countryXId, countryYId
WHERE countryId IN [countryXId, countryYId]
WITH friend,
  CASE WHEN countryId==countryYId THEN 1 ELSE 0 END AS messageX,
  CASE WHEN countryId==countryYId THEN 1 ELSE 0 END AS messageY
WITH friend, sum(messageX) AS xCount, sum(messageY) AS yCount
WHERE xCount>0 AND yCount>0
RETURN
  id(friend) AS friendId,
  friend.Person.firstName AS friendFirstName,
  friend.Person.lastName AS friendLastName,
  xCount,
  yCount,
  xCount + yCount AS xyCount
  ORDER BY xyCount DESC, friendId ASC
  LIMIT 20
