MATCH (city:Place)-[:IS_PART_OF]->(country:Place)
WHERE country.Place.name == $countryXName OR country.Place.name == $countryYName
WITH  collect(id(city)) AS cities
MATCH (person)-[:KNOWS*1..2]-(friend)-[:IS_LOCATED_IN]->(city)
WHERE id(person) == $personId AND id(friend) != $personId AND id(city) NOT IN cities
WITH DISTINCT friend
MATCH (friend)<-[:POST_HAS_CREATOR|COMMENT_HAS_CREATOR]-(message)-[:IS_LOCATED_IN]->(country)
WHERE
    CASE
    WHEN  message.`Comment`.creationDate < $endDate AND message.`Comment`.creationDate >= $startDate AND (country.Place.name == $countryXName OR country.Place.name == $countryYName) THEN true
    WHEN message.Post.creationDate < $endDate AND message.Post.creationDate >= $startDate AND (country.Place.name == $countryXName OR country.Place.name == $countryYName) THEN true
    ELSE false
    END
WITH friend,
     CASE WHEN country.Place.name == $countryXName THEN 1 ELSE 0 END AS messageX,
     CASE WHEN country.Place.name == $countryYName THEN 1 ELSE 0 END AS messageY
WITH friend, sum(messageX) AS xCount, sum(messageY) AS yCount
WHERE xCount>0 AND yCount>0
RETURN tointeger(substr(id(friend), 2)) AS friendId,
  friend.Person.firstName AS friendFirstName,
  friend.Person.lastName AS friendLastName,
  xCount,
  yCount,
  xCount + yCount AS xyCount
  ORDER BY xyCount DESC, friendId ASC
  LIMIT 20