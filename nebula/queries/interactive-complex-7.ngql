MATCH (person:Person)<-[:POST_HAS_CREATOR|COMMENT_HAS_CREATOR]-(message)<-[like:LIKES_COMMENT|LIKES_POST]-(liker:Person)
  WHERE id(person) == $personId
WITH
    liker,
    message,
    like.creationDate AS likeTime,
    person,
    id(message) AS messageId
ORDER BY
    likeTime DESC,
    messageId ASC
WITH
    liker,
    head(collect({msg:message, likeTime:likeTime})) AS latestLike,
    person
OPTIONAL MATCH (liker)-[e:KNOWS]-(person)
RETURN
    toInteger(substr(id(liker), 2)) AS personId,
    liker.Person.firstName AS personFirstName,
    liker.Person.lastName AS personLastName,
    latestLike.likeTime AS likeCreationDate,
    id(latestLike.msg) AS messageId,
    CASE WHEN tags(latestLike.msg) == ["Post"] THEN
          CASE WHEN size(latestLike.msg.imageFile) == 0 THEN latestLike.msg.content
          ELSE latestLike.msg.imageFile
          END
    ELSE latestLike.msg.content
    END AS messageContent,
    latestLike.msg.creationDate AS messageCreationDate,
    e IS NULL AS isNew
ORDER BY
    likeCreationDate DESC,
    personId ASC
LIMIT 20