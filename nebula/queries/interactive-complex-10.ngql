MATCH (person:Person)-[:KNOWS]-(friend)
WHERE id(person) == $personId
WITH person, collect(id(friend)) AS friends
MATCH (person:Person)-[:KNOWS*2]-(friend)-[:IS_LOCATED_IN]->(city:Place)
WHERE id(friend) != $personId AND id(friend) NOT IN friends
WITH person, city, friend, datetime(friend.Person.birthday) as birthday
WHERE (birthday.month==$month AND birthday.day>=21) OR
        (birthday.month==($month%12)+1 AND birthday.day<22)
WITH DISTINCT friend AS f, city AS c, person AS p
OPTIONAL MATCH (f)<-[:POST_HAS_CREATOR]-(post:Post)
OPTIONAL MATCH (p)-[:HAS_INTEREST]->(m), (post)-[:HAS_TAG]->(m)
WITH f AS friend, c AS city, post, CASE WHEN count(m) > 0 THEN 1 ELSE 0 END AS cnt
WITH friend, city, sum(cnt) AS commonPostCount, count(post) AS postCount
RETURN toInteger(substr(id(friend), 2)) AS personId,
       friend.Person.firstName AS personFirstName,
       friend.Person.lastName AS personLastName,
       commonPostCount - (postCount - commonPostCount) AS commonInterestScore,
       friend.Person.gender AS personGender,
       city.Place.name AS personCityName
ORDER BY commonInterestScore DESC, personId ASC
LIMIT 10
